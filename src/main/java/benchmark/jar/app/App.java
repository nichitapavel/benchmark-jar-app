package benchmark.jar.app;/*
 * This Java source file was generated by the Gradle 'init' task.
 */

import npb3.*;
import npb3.BMInOut.BMArgs;

import java.util.Map;


public class App {
    public static void main(String[] args) {
        Map parsedArgs = Parser.parse(args);

        String benchmark = (String) parsedArgs.get("benchmark");
        int threads = (int) parsedArgs.get("threads");
        String size = (String) parsedArgs.get("size");
        String http_endpoint = (String) parsedArgs.get("http_endpoint");

        StringBuilder message = new StringBuilder();
        message.append(
                String.format("Input data:\nBenchmark: %s\t Class size: %s\t Threads: %d\n",
                        benchmark, size, threads)
        );

        boolean serial = false;
        if (threads == 1) {
            serial = true;
        }

        switch (benchmark) {
            case "bt":
                BT bt = null;
                try{
                    bt = new BT(size.charAt(0), threads, serial);
                }catch(OutOfMemoryError e){
                    BMArgs.outOfMemoryMessage();
                }
                message.append(bt.runULL(
                        http_endpoint,
                        new HostInfo().getName()
                ));
                break;
            case "is":
                IS is = null;
                try{
                    is = new IS(size.charAt(0), threads, serial);
                }catch(OutOfMemoryError e){
                    BMArgs.outOfMemoryMessage();
                }
                message.append(is.runULL(
                        http_endpoint,
                        new HostInfo().getName()
                ));
                break;
            case "mg":
                MG mg = null;
                try{
                    mg = new MG(size.charAt(0), threads, serial);
                }catch(OutOfMemoryError e){
                    BMArgs.outOfMemoryMessage();
                }
                message.append(mg.runULL(
                        http_endpoint,
                        new HostInfo().getName()
                ));
                break;
            case "cg":
                CG cg = null;
                try{
                    cg = new CG(size.charAt(0), threads, serial);
                }catch(OutOfMemoryError e){
                    BMArgs.outOfMemoryMessage();
                }
                message.append(cg.runULL(
                        http_endpoint,
                        new HostInfo().getName()
                ));
                break;
            case "ft":
                FT ft = null;
                try{
                    ft = new FT(size.charAt(0), threads, serial);
                }catch(OutOfMemoryError e){
                    BMArgs.outOfMemoryMessage();
                }
                message.append(ft.runULL(
                        http_endpoint,
                        new HostInfo().getName()
                ));
                break;
            case "lu":
                LU lu = null;
                try{
                    lu = new LU(size.charAt(0), threads, serial);
                }catch(OutOfMemoryError e){
                    BMArgs.outOfMemoryMessage();
                }
                message.append(lu.runULL(
                        http_endpoint,
                        new HostInfo().getName()
                ));
                break;
            case "sp":
                SP sp = null;
                try{
                    sp = new SP(size.charAt(0), threads, serial);
                }catch(OutOfMemoryError e){
                    BMArgs.outOfMemoryMessage();
                }
                message.append(sp.runULL(
                        http_endpoint,
                        new HostInfo().getName()
                ));
                break;
        }

        System.out.println(message.toString());
    }

}
